{"version":3,"sources":["components/searchBar.js","components/cityCard.js","components/cityList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","event","preventDefault","this","onSubmit","className","style","marginTop","e","onFormSubmit","type","placeholder","value","onChange","setState","target","React","Component","CityCard","city","console","log","name","slots","map","item","vaccine","fee","min_age_limit","available_capacity","CityList","cityLink","citys","App","onSearchSubmit","a","axios","get","baseURL","params","pincode","date","getDate","response","data","sessions","today","Date","String","padStart","getMonth","getFullYear","text","length","district_name","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb5efcfa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: \"\",\r\n    };\r\n  }\r\n\r\n  onFormSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.term);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui segment\" style={{marginTop: 30  }}> \r\n        <form onSubmit={(e) => this.onFormSubmit(e)} className=\"ui form\">\r\n          <div className=\"field\">\r\n            <div className=\"ui black ribbon label\">Search District's pincode</div>\r\n\r\n            <div className=\"ui input focus\" style={{ marginTop: \"10px\" }}>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search...\"\r\n                value={this.state.term}\r\n                onChange={(e) => this.setState({ term: e.target.value })}\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","const CityCard = ({ city }) => {\r\n  console.log(city);\r\n  return (\r\n    <div className=\"ui card raised\">\r\n      <div className=\"content\">\r\n        <div className=\"header\">\r\n          <i className=\"hospital outline icon\"></i> {city.name}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"ui content \">\r\n        <div className=\"item\">\r\n          <h4 className=\"ui left floated \">\r\n            <i className=\"clock outline icon\"></i> Available Slots :\r\n          </h4>\r\n          <br/>\r\n          <div className=\"ui divider\"></div>\r\n          \r\n          <div className=\" ui one column centered  grid\">\r\n            {city.slots.map((item) => {\r\n              return (\r\n                <div className=\"column\">\r\n                  <div className=\"ui label\">{item}</div>\r\n                  <br />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <div className=\"ui small feed\">\r\n          <div className=\"event\">\r\n            <div className=\"content\">\r\n              <div className=\"summary\">\r\n                <div>\r\n                  <i className=\"stethoscope icon\"></i>&nbsp;&nbsp;&nbsp;\r\n                  <b>vaccine name : </b>\r\n                  {city.vaccine}\r\n                </div>\r\n                <div>\r\n                  <i className=\"money bill alternate icon\"></i>&nbsp;&nbsp;&nbsp;\r\n                  <b>vaccine fee : </b>\r\n                  {city.fee}\r\n                </div>\r\n                <div>\r\n                  <i className=\"calendar check outline icon\"></i>&nbsp;&nbsp;&nbsp;\r\n                  <b>min_age_limit : </b>\r\n                  {city.min_age_limit}\r\n                </div>\r\n                <div>\r\n                  <i className=\"shield alternate icon\"></i>&nbsp;&nbsp;&nbsp;\r\n                  <b>available capacity : </b>\r\n                  {city.available_capacity}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityCard;\r\n","import CityCard from './cityCard';\r\n\r\nconst CityList = ({ citys }) => {\r\n  \r\n  const cityLink = citys.map( (item) =>{\r\n    return <div className=\"column\"> <CityCard city={item} /> </div>\r\n  });\r\n\r\n  return(\r\n    <div className=\"ui stackable three centered column grid\">\r\n     {cityLink}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CityList;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchBar from \"./components/searchBar\";\r\nimport CityList from \"./components/cityList\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.baseURL =\r\n      \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/findByPin\";\r\n    this.state = {\r\n      citys: []\r\n    };\r\n  }\r\n\r\n  getDate(){\r\n      let today = new Date();\r\n      let dd = String(today.getDate()).padStart(2, '0');\r\n      let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n      let yyyy = today.getFullYear();\r\n      return dd + '-' + mm + '-' + yyyy;\r\n  }\r\n\r\n  onSearchSubmit = async (term) => {\r\n    const response = await axios.get(this.baseURL, {\r\n      params: {\r\n        pincode:term,\r\n        date: this.getDate()\r\n      },\r\n    });\r\n\r\n    console.log(response.data.sessions);\r\n\r\n    this.setState({ citys: response.data.sessions });\r\n  };\r\n\r\n  render() {\r\n    let text = \"\"\r\n    if( this.state.citys.length === 0){\r\n      text = \"Total hospitals found 0\"\r\n    }\r\n    else{\r\n      text = \"Total hospitals found in \"  + this.state.citys[0].district_name +\" are \" + String(this.state.citys.length)\r\n\r\n    }\r\n    return (\r\n      <div className=\"ui padded container\">\r\n        <SearchBar onSubmit={this.onSearchSubmit} />\r\n        <h2>{text}</h2>\r\n        <br/>\r\n        <br/>\r\n        <CityList citys={this.state.citys} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.register();"],"sourceRoot":""}